import streamlit as st
import matplotlib.pyplot as plt
import re
from docx import Document
import PyPDF2
from datetime import datetime

# Configura√ß√£o inicial da p√°gina
st.set_page_config(
    page_title="Clara - An√°lise Jur√≠dica de Contratos",
    page_icon="‚öñÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personalizado
st.markdown("""
<style>
    .header-style {
        font-size: 20px;
        font-weight: bold;
        color: #2e86de;
        padding: 10px;
        border-radius: 5px;
        margin-bottom: 10px;
    }
    .risk-high {
        background-color: #ff6b6b;
        color: white;
        padding: 5px 10px;
        border-radius: 5px;
        font-weight: bold;
    }
    .risk-medium {
        background-color: #feca57;
        color: white;
        padding: 5px 10px;
        border-radius: 5px;
        font-weight: bold;
    }
    .risk-low {
        background-color: #1dd1a1;
        color: white;
        padding: 5px 10px;
        border-radius: 5px;
        font-weight: bold;
    }
    .contract-summary {
        background-color: #f8f9fa;
        padding: 15px;
        border-radius: 10px;
        border-left: 5px solid #2e86de;
        margin-bottom: 20px;
    }
    .clause-card {
        padding: 15px;
        border-radius: 10px;
        margin-bottom: 15px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }
    .footer {
        font-size: 12px;
        text-align: center;
        margin-top: 30px;
        color: #7f8c8d;
    }
</style>
""", unsafe_allow_html=True)

def analisar_clausulas(texto):
    regras = {
        # Cl√°usulas educacionais
        r"(n√£o poder√° cancelar|proibido cancelar|vedado rescindir).*(qualquer hip√≥tese|mesmo em caso)": {
            "mensagem": "Proibi√ß√£o Total de Cancelamento",
            "explicacao": "Cl√°usula que impede o cancelamento em qualquer circunst√¢ncia √© considerada abusiva pelo CDC (Art. 51, IV).",
            "pontuacao": 15,
            "tipo": "abusiva",
            "recomendacao": "Solicite a modifica√ß√£o para permitir cancelamento com aviso pr√©vio de 30 dias."
        },
        r"(renova√ß√£o autom√°tica|prorrogado automaticamente).*(sem aviso|n√£o notifica)": {
            "mensagem": "Renova√ß√£o Autom√°tica sem Aviso",
            "explicacao": "Contratos devem prever aviso pr√©vio de pelo menos 30 dias para renova√ß√£o autom√°tica (Art. 9¬∫, Lei 8.245/91).",
            "pontuacao": 10,
            "tipo": "abusiva",
            "recomendacao": "Exija cl√°usula que obrigue notifica√ß√£o com anteced√™ncia m√≠nima de 30 dias."
        },
        r"(multa|juros).*(superior a 2%|acima de 10%|20%)": {
            "mensagem": "Multa/Juros Abusivos",
            "explicacao": "Multas superiores a 2% ao m√™s ou juros acima da taxa m√©dia do mercado s√£o considerados abusivos (S√∫mula 54 do STJ).",
            "pontuacao": 12,
            "tipo": "abusiva",
            "recomendacao": "Negocie redu√ß√£o para no m√°ximo 2% de multa e juros de 1% ao m√™s."
        },
        r"(n√£o se responsabiliza|isen√ß√£o de responsabilidade).*(qualquer falha|indisponibilidade)": {
            "mensagem": "Isen√ß√£o Total de Responsabilidade",
            "explicacao": "Empresas n√£o podem se eximir totalmente de responsabilidade por falhas na presta√ß√£o de servi√ßos (Art. 14, CDC).",
            "pontuacao": 15,
            "tipo": "abusiva",
            "recomendacao": "Exija reda√ß√£o que limite responsabilidade apenas a casos de for√ßa maior."
        },
        r"(foro|jurisdi√ß√£o).*(Luxemburgo|exterior|estrangeiro)": {
            "mensagem": "Foro em Pa√≠s Estrangeiro",
            "explicacao": "Contratos com consumidores brasileiros devem prever foro no Brasil (Art. 78, CDC).",
            "pontuacao": 15,
            "tipo": "abusiva",
            "recomendacao": "Insista em foro no local de sua resid√™ncia no Brasil."
        },
        
        # Boas pr√°ticas
        r"(direito ao arrependimento|desist√™ncia|7 dias)": {
            "mensagem": "Direito ao Arrependimento",
            "explicacao": "Cl√°usula que respeita o direito legal de arrependimento em 7 dias (Art. 49, CDC).",
            "pontuacao": -5,
            "tipo": "favoravel",
            "recomendacao": "Mantenha esta cl√°usula que protege seus direitos."
        }
    }

    resultados = []
    for padrao, detalhes in regras.items():
        matches = re.finditer(padrao, texto, re.IGNORECASE)
        for match in matches:
            contexto = texto[max(0, match.start()-50):match.end()+50].replace("\n", " ")
            resultados.append({
                "padrao": padrao,
                "contexto": f"...{contexto}..." if len(contexto) > 100 else contexto,
                **detalhes
            })

    return resultados

def gerar_resumo_contrato(texto):
    # Identifica tipo de contrato
    tipo_contrato = "Contrato Gen√©rico"
    if "EDUCACIONAIS" in texto.upper():
        tipo_contrato = "Contrato Educacional"
    elif "LOCA√á√ÉO" in texto.upper():
        tipo_contrato = "Contrato de Loca√ß√£o"
    elif "PRESTA√á√ÉO DE SERVI√áOS" in texto.upper():
        tipo_contrato = "Contrato de Presta√ß√£o de Servi√ßos"
    
    # Extrai partes principais
    partes = re.search(r"CONTRATANTE:(.*?)CONTRATADA:(.*?)CL√ÅUSULAS:", texto, re.IGNORECASE|re.DOTALL)
    contratante = partes.group(1).strip() if partes else "N√£o identificado"
    contratada = partes.group(2).strip() if partes else "N√£o identificado"
    
    # Extrai valor se existir
    valor = re.search(r"(valor total|valor do curso).*?R\$\s*([\d.,]+)", texto, re.IGNORECASE)
    valor_formatado = f"R$ {valor.group(2)}" if valor else "N√£o especificado"
    
    # Extrai dura√ß√£o se existir
    duracao = re.search(r"(dura√ß√£o|prazo).*?(\d+)\s*(meses|anos|dias)", texto, re.IGNORECASE)
    duracao_formatada = f"{duracao.group(2)} {duracao.group(3)}" if duracao else "N√£o especificada"
    
    return {
        "tipo": tipo_contrato,
        "contratante": contratante,
        "contratada": contratada,
        "valor": valor_formatado,
        "duracao": duracao_formatada,
        "resumo": f"""
        **Tipo de Contrato:** {tipo_contrato}\n
        **Contratante:** {contratante}\n
        **Contratada:** {contratada}\n
        **Valor Total:** {valor_formatado}\n
        **Dura√ß√£o:** {duracao_formatada}\n
        """
    }

def main():
    # Inicializa resultados como lista vazia
    resultados = []
    
    # Sidebar com informa√ß√µes
    with st.sidebar:
        st.image("https://img.icons8.com/color/96/000000/contract.png", width=80)
        st.markdown("""
        ### Sobre a Clara
        A Clara √© uma ferramenta de an√°lise preliminar de contratos que identifica cl√°usulas potencialmente abusivas com base no C√≥digo de Defesa do Consumidor.
        
        **Limita√ß√µes:**
        - N√£o substitui an√°lise jur√≠dica profissional
        - Baseada em padr√µes conhecidos
        - Pode n√£o identificar todas as nuances
        
        **Dicas:**
        - Sempre leia todo o contrato
        - Destaque pontos que n√£o entender
        - Consulte um advogado para an√°lise completa
        """)
        st.markdown("---")
        st.markdown(f"<div class='footer'>Vers√£o 2.1 | {datetime.now().year} ¬© Clara Analytics</div>", unsafe_allow_html=True)

    # Cabe√ßalho principal
    col1, col2 = st.columns([4, 1])
    with col1:
        st.title("‚öñÔ∏è Clara - An√°lise Jur√≠dica de Contratos")
        st.markdown("""
        <div class='header-style'>
        Identifique cl√°usulas abusivas em contratos antes de assinar. Envie seu documento e receba uma an√°lise preliminar em segundos.
        </div>
        """, unsafe_allow_html=True)
    with col2:
        st.image("https://img.icons8.com/fluency/96/000000/law.png", width=100)

    # Upload do documento
    st.markdown("### üì§ Envie seu contrato para an√°lise")
    uploaded_file = st.file_uploader(
        "Arraste seu arquivo (PDF, DOCX ou TXT) ou clique para selecionar",
        type=["txt", "docx", "pdf"],
        help="Formatos aceitos: .txt, .docx e .pdf",
        label_visibility="collapsed"
    )

    if uploaded_file:
        # Processamento do arquivo
        conteudo = ""
        try:
            if uploaded_file.type == "text/plain":
                conteudo = uploaded_file.read().decode("utf-8")
            elif uploaded_file.type == "application/pdf":
                reader = PyPDF2.PdfReader(uploaded_file)
                conteudo = "\n".join([page.extract_text() for page in reader.pages if page.extract_text()])
            elif uploaded_file.type == "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
                doc = Document(uploaded_file)
                conteudo = "\n".join([p.text for p in doc.paragraphs])
        except Exception as e:
            st.error(f"Erro ao ler arquivo: {str(e)}")
            return

        if conteudo:
            # Resumo do contrato
            resumo = gerar_resumo_contrato(conteudo)
            
            st.markdown("---")
            st.markdown("## üìù Resumo do Contrato")
            with st.container():
                st.markdown(f"""
                <div class='contract-summary'>
                {resumo['resumo']}
                </div>
                """, unsafe_allow_html=True)
                
                st.caption("""
                **Legenda do Resumo:**
                - Identificamos as partes, valor e dura√ß√£o para ajudar na compreens√£o do contrato.
                - Este √© apenas um resumo autom√°tico - leia o documento completo atentamente.
                """)

            # An√°lise das cl√°usulas
            resultados = analisar_clausulas(conteudo) if conteudo else []
            
            st.markdown("---")
            st.markdown("## üîç An√°lise Detalhada das Cl√°usulas")
            
            if resultados:
                # Calcula pontua√ß√£o total
                pontuacao_total = sum(item["pontuacao"] for item in resultados if item["pontuacao"] > 0)
                clausulas_favoraveis = sum(1 for item in resultados if item["tipo"] == "favoravel")
                
                # Determina n√≠vel de risco
                if pontuacao_total >= 30:
                    risco = "<span class='risk-high'>ALTO RISCO</span>"
                    recomendacao = "‚ö†Ô∏è Contrato com m√∫ltiplas cl√°usulas abusivas. Recomendamos N√ÉO ASSINAR e consultar um advogado para revis√£o completa."
                elif pontuacao_total >= 15:
                    risco = "<span class='risk-medium'>RISCO MODERADO</span>"
                    recomendacao = "üîç Contrato com algumas cl√°usulas problem√°ticas. Recomendamos negociar altera√ß√µes antes de assinar."
                else:
                    risco = "<span class='risk-low'>BAIXO RISCO</span>"
                    recomendacao = "‚úÖ Contrato parece razo√°vel, mas revise cuidadosamente as observa√ß√µes abaixo."
                
                # Mostra resumo de risco
                col1, col2, col3 = st.columns(3)
                col1.markdown(f"**Pontua√ß√£o Total de Risco**\n# {pontuacao_total} pts")
                col2.markdown(f"**N√≠vel de Risco**\n<div style='margin-top:10px'>{risco}</div>", unsafe_allow_html=True)
                col3.markdown(f"**Cl√°usulas Favor√°veis**\n# {clausulas_favoraveis}")
                
                st.markdown(f"""
                <div style='background-color:#f8f9fa; padding:15px; border-radius:10px; margin-top:20px'>
                <strong>üìå Recomenda√ß√£o:</strong> {recomendacao}
                </div>
                """, unsafe_allow_html=True)

                # Exibe cada cl√°usula encontrada
                st.markdown("### ‚öñÔ∏è Cl√°usulas Identificadas")
                
                tab1, tab2 = st.tabs(["Cl√°usulas Problem√°ticas", "Cl√°usulas Favor√°veis"])
                
                with tab1:
                    clausulas_problematicas = [item for item in resultados if item["tipo"] != "favoravel"]
                    if clausulas_problematicas:
                        for item in clausulas_problematicas:
                            st.markdown(f"""
                            <div class='clause-card' style='border-left: 5px solid {'#ff6b6b' if item["tipo"] == "abusiva" else '#feca57'};'>
                                <h4>{'üö® ' if item["tipo"] == "abusiva" else '‚ö†Ô∏è '}{item["mensagem"]}</h4>
                                <p><strong>Trecho do contrato:</strong> <em>{item["contexto"]}</em></p>
                                <p><strong>Problema:</strong> {item["explicacao"]}</p>
                                <p><strong>Pontua√ß√£o de risco:</strong> {item["pontuacao"]} pontos</p>
                                <p><strong>‚úîÔ∏è Recomenda√ß√£o:</strong> {item["recomendacao"]}</p>
                            </div>
                            """, unsafe_allow_html=True)
                    else:
                        st.success("Nenhuma cl√°usula problem√°tica encontrada!")
                
                with tab2:
                    clausulas_favoraveis = [item for item in resultados if item["tipo"] == "favoravel"]
                    if clausulas_favoraveis:
                        for item in clausulas_favoraveis:
                            st.markdown(f"""
                            <div class='clause-card' style='border-left: 5px solid #1dd1a1;'>
                                <h4>‚úÖ {item["mensagem"]}</h4>
                                <p><strong>Trecho do contrato:</strong> <em>{item["contexto"]}</em></p>
                                <p><strong>Benef√≠cio:</strong> {item["explicacao"]}</p>
                                <p><strong>Pontua√ß√£o positiva:</strong> {item["pontuacao"]} pontos</p>
                            </div>
                            """, unsafe_allow_html=True)
                    else:
                        st.info("Nenhuma cl√°usula especialmente favor√°vel foi identificada.")

                # Gr√°fico de an√°lise
                st.markdown("---")
                st.markdown("## üìä Vis√£o Geral da An√°lise")
                
                # Contagem de cada tipo de cl√°usula
                counts = {
                    "abusiva": sum(1 for item in resultados if item["tipo"] == "abusiva"),
                    "potencial": sum(1 for item in resultados if item["tipo"] == "potencial"),
                    "favoravel": sum(1 for item in resultados if item["tipo"] == "favoravel")
                }
                
                # Preparando dados para o gr√°fico
                labels = []
                sizes = []
                colors = []
                
                for clause_type in counts:
                    if counts[clause_type] > 0:
                        labels.append({
                            "abusiva": "Abusivas",
                            "potencial": "Problem√°ticas",
                            "favoravel": "Favor√°veis"
                        }[clause_type])
                        sizes.append(counts[clause_type])
                        colors.append({
                            "abusiva": "#ff6b6b",
                            "potencial": "#feca57",
                            "favoravel": "#1dd1a1"
                        }[clause_type])
                
                if sizes:
                    fig, ax = plt.subplots(figsize=(8, 6))
                    
                    # Apenas destaque se houver mais de um segmento
                    explode = [0.1 if label == "Abusivas" and counts["abusiva"] > 0 else 0 for label in labels] if len(labels) > 1 else None
                    
                    ax.pie(
                        sizes,
                        labels=labels,
                        colors=colors,
                        autopct='%1.1f%%',
                        startangle=90,
                        explode=explode,
                        shadow=True
                    )
                    ax.set_title("Distribui√ß√£o de Cl√°usulas Identificadas", pad=20)
                    st.pyplot(fig)
                else:
                    st.warning("N√£o h√° dados suficientes para gerar o gr√°fico.")
                
                # Bot√£o de download do relat√≥rio
                st.markdown("---")
                relatorio = f"""
                RELAT√ìRIO DE AN√ÅLISE DE CONTRATO - CLARA
                ========================================
                
                Data da An√°lise: {datetime.now().strftime("%d/%m/%Y %H:%M")}
                
                RESUMO DO CONTRATO:
                -------------------
                {resumo['resumo']}
                
                PONTUA√á√ÉO TOTAL: {pontuacao_total} pontos
                N√çVEL DE RISCO: {risco.replace('<span class="risk-high">', '').replace('</span>', '')}
                
                CL√ÅUSULAS IDENTIFICADAS:
                ------------------------
                {chr(10).join(f"- {item['mensagem']} ({item['pontuacao']} pts): {item['explicacao']}" for item in resultados)}
                
                RECOMENDA√á√ÉO FINAL:
                -------------------
                {recomendacao}
                
                Observa√ß√£o: Este relat√≥rio √© gerado automaticamente e n√£o substitui consulta jur√≠dica profissional.
                """
                
                st.download_button(
                    label="üì• Baixar Relat√≥rio Completo (TXT)",
                    data=relatorio,
                    file_name=f"analise_contrato_{datetime.now().strftime('%Y%m%d')}.txt",
                    mime="text/plain",
                    use_container_width=True
                )
            else:
                st.success("""
                üéâ Nenhuma cl√°usula problem√°tica foi identificada com as regras atuais!
                
                **Recomendamos ainda:**
                - Ler todo o contrato atentamente
                - Verificar se todas as promessas verbais est√£o no documento
                - Confirmar prazos e valores
                """)
                st.balloons()

if __name__ == "__main__":
    main()